class Solution
{
    //Function to find a solved Sudoku. 
    public static boolean issafe(int sudoku[][],int row,int col,int digit)
    {
        // column condition
        for(int i=0;i<=8;i++)
        {
            if(sudoku[i][col] == digit) return false;
        }
        // row condition
        for(int i=0;i<=8;i++)
        {
            if(sudoku[row][i]==digit) return false;
        }
        //3*3 grid cheak
        int startRow=(row/3)*3;
        int startCol=(col/3)*3;
        for(int i=startRow;i<startRow+3;i++)
        {
            for(int j=startCol;j<startCol+3;j++)
            {
                if(sudoku[i][j]==digit) return false;
            }
        }
        return true;
    }
    public static boolean sudokuS(int sudoku[][],int row,int col)
    {
        // base case 
        if(row==9) return true ;
        //kaam
        int nextRow = row;
        int nextCol = col+1;
        if(nextCol==9)
        {
            nextRow=row+1;
            nextCol=0;
        }

        if(sudoku[row][col]!= 0) return sudokuS(sudoku, nextRow, nextCol);// already set element 

        for(int digit=1;digit<=9;digit++)
        {
            if(issafe(sudoku,row,col,digit))
            {
                sudoku[row][col]=digit; 
                if(sudokuS(sudoku, nextRow,nextCol)) return true;
                sudoku[row][col]=0;  // backtrack
            }
        }
        return false ;

    }
    //Function to find a solved Sudoku. 
    static boolean SolveSudoku(int grid[][])
    {
       if(sudokuS(grid, 0, 0))
        {
        
            return true;
        }
        else return false; // add your code here
        
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
         for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                System.out.print(grid[i][j]+" ");
            }
            
        }
    }    
}
