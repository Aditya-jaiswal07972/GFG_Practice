import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int n = Integer.parseInt(read.readLine());
            String input_line[] = read.readLine().trim().split("\\s+");
            int keys[]= new int[n];
            for(int i = 0; i < n; i++)
                keys[i] = Integer.parseInt(input_line[i]);
            String input_line1[] = read.readLine().trim().split("\\s+");
            int freq[]= new int[n];
            for(int i = 0; i < n; i++)
                freq[i] = Integer.parseInt(input_line1[i]);
            Solution ob = new Solution();
            System.out.println(ob.optimalSearchTree(keys, freq, n));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    static int optimalSearchTree(int keys[], int freq[], int n)
    {
        Integer sol[][][] = new Integer[n][n][n+1];
      
        return fun(keys,freq,0,n-1,1,sol);
    }
    static int fun(int arr[],int freq[], int i, int j,int level,Integer sol[][][])
    {
        if(i>j)return 0;
       
        if(i==j) return level*freq[i];
        
        if(sol[i][j][level] != null)
        {
            return sol[i][j][level];
        }
        
        int min = Integer.MAX_VALUE;
        
        for(int k=i ; k<=j ; k++)
        {
            int left = fun(arr,freq,i,k-1,level+1,sol);
          
            int right = fun(arr,freq,k+1,j,level+1,sol);
          
            int frequency = freq[k]*level;  
          
            int total = left+right+frequency;
	      
	        min = Math.min(total,min);
	    }
	    return sol[i][j][level]= min;
    }
}

